# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: WA Project Desafio B CD - Continuous Delivery

on:
  push:
    branches: [ "main" ]
jobs:
  lint-and-test-api:
    runs-on: ubuntu-latest
    name: Check API Lint and run Tests
    steps:
    - uses: actions/checkout@v3
    - name: Bucket actions
      uses: actions/setup-node@v3
      with:
        node-version: '12.22.12'
    - name: Install packages
      run: yarn install
      working-directory: ./backend
    - name: Run Linter
      run: yarn lint
      working-directory: ./backend
    - name: Run unit-tests
      run: yarn test --passWithNoTests 
      working-directory: ./backend
  lint-and-test-app:
    runs-on: ubuntu-latest
    name: Check APP Lint and run Tests
    steps:
    - uses: actions/checkout@v3
    - name: Bucket actions
      uses: actions/setup-node@v3
      with:
        node-version: '12.22.12'
        cache-dependency-path: './frontend'
        cache: 'yarn'
    - name: Cypress
      uses: cypress-io/github-action@v4
      with:
        working-directory: './frontend'
        browser: chrome
    - name: Install packages
      run: yarn install
      working-directory: ./frontend
    - name: Run Linter
      run: yarn lint
      working-directory: ./frontend
    - name: Run Linter
      run: yarn lint
      working-directory: ./frontend
    - name: Run unit-tests
      run: yarn test --passWithNoTests 
      working-directory: ./frontend
    - name: Run e2e tests
      run: yarn test:e2e
      working-directory: ./frontend
  deploy-api:
    runs-on: ubuntu-latest
    needs: [lint-and-test-api, lint-and-test-app]
    defaults:
      run:
        shell: bash
    name: Build and Deploy API
    steps:
    - uses: actions/checkout@v3
    - name: Bucket actions
      uses: actions/setup-node@v3
      with:
        node-version: '12.22.12'
    - name: Installing packages
      run: yarn install
      working-directory: ./backend
    - name: Building
      run: yarn build
      working-directory: ./backend
    - name: Copying static public files
      run: cp -r public dist/public
      working-directory: ./backend
    - name: Copying package.json and yarn.lock
      run: |
        cp package.json dist/
        cp yarn.lock dist/
      working-directory: ./backend
    - name: Setup .env file - Copy from sample
      run: cp .env.sample dist/.env
      working-directory: ./backend
    - name: Setup .env file - Set NODE_ENV to prod
      run: sed -i 's/<node_env>/prod/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set API_PORT to 80
      run: sed -i 's/<api_port>/80/' .env
      working-directory: ./backend/dist      
    - name: Setup .env file - Set MySQL environment variables
      run: |
        sed -i 's/<mysql_host>/'"'"'${{ secrets.DH_MASTELARI_MYSQL_HOST }}'"'"'/' .env
        sed -i 's/<mysql_port>/${{ secrets.DH_MASTELARI_MYSQL_PORT }}/' .env
        sed -i 's/<mysql_user>/'"'"'${{ secrets.DH_MASTELARI_MYSQL_USER }}'"'"'/' .env
        sed -i 's/<mysql_user_password>/'"'"'${{ secrets.DH_MASTELARI_MYSQL_USER_PASSWORD }}'"'"'/' .env
        sed -i 's/<mysql_database_name>/'"'"'${{ secrets.DH_MASTELARI_MYSQL_DATABASE_NAME }}'"'"'/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set AUTH0 environment variables - DISABLE_AUTH0
      run: |
        sed -i 's/<disable_auth0>/ 0/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_SUBDOMAIN
      run: |
        sed -i 's/<auth0_subdomain>/${{ secrets.DH_MASTELARI_AUTH0_SUBDOMAIN }}/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_REGION
      run: |
        sed -i 's/<auth0_region>/${{ secrets.DH_MASTELARI_AUTH0_REGION }}/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_APP_AUDIENCE
      run: |
        sed -i 's/<auth0_app_audience>/${{ secrets.DH_MASTELARI_AUTH0_APP_AUDIENCE }}/' .env
      working-directory: ./backend/dist
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_APP_CRIPT_ALGORITHM
      run: |
        sed -i 's/<auth0_app_cript_algorithm>/${{ secrets.DH_MASTELARI_AUTH0_APP_CRIPT_ALGORITHM }}/' .env
      working-directory: ./backend/dist
    - name: Publish files from dist folder to remote server
      uses: ArthurYdalgo/github-action-scp@master
      with:
        local: "backend/dist"
        remote: "wpdesafiob-api.mastelari.ml"
        host: ${{ secrets.DH_MASTELARI_SSHHOST }}
        username: ${{ secrets.DH_MASTELARI_SSHUSER }}
        password : ${{ secrets.DH_MASTELARI_SSHPASSWORD }}
        port: ${{ secrets.DH_MASTELARI_SSHPORT }}
    - name: Post-publishing actions
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DH_MASTELARI_SSHHOST }}
        username: ${{ secrets.DH_MASTELARI_SSHUSER }}
        password : ${{ secrets.DH_MASTELARI_SSHPASSWORD }}
        port: ${{ secrets.DH_MASTELARI_SSHPORT }}
        script: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          cd ~/wpdesafiob-api.mastelari.ml
          yarn install --production
          yarn migration:run:prod
          touch tmp/restart.txt
  deploy-app:
    runs-on: ubuntu-latest
    needs: [deploy-api]
    name: Build and Deploy APP
    steps:
    - uses: actions/checkout@v3
    - name: Bucket actions
      uses: actions/setup-node@v3
      with:
        node-version: '12.22.12'
    - name: Installing packages
      run: yarn install
      working-directory: ./frontend
    - name: Setup .env file - Copy from sample
      run: cp .env.sample .env
      working-directory: ./frontend
    - name: Setup .env file - Set NODE_ENV to prod
      run: sed -i 's/<node_env>/prod/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set PORT to 80
      run: sed -i 's/<app_port>/80/' .env
      working-directory: ./frontend      
    - name: Setup .env file - Set API_URL to https://wpdesafiob-api.mastelari.ml
      run: sed -i 's/<api_url>/'"'"'https\:\/\/wpdesafiob\-api\.mastelari\.ml'"'"'/' .env
      working-directory: ./frontend      
    - name: Setup .env file - Set AUTH0 environment variables - DISABLED_AUTH0
      run: |
        sed -i 's/<disabled_auth0>/ 0/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_CLIENT_ID
      run: |
        sed -i 's/<auth0_client_id>/'"'"'${{ secrets.DH_MASTELARI_AUTH0_CLIENT_ID }}'"'"'/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_CLIENT_SECRET
      run: |
        sed -i 's/<auth0_client_secret>/'"'"'${{ secrets.DH_MASTELARI_AUTH0_CLIENT_SECRET }}'"'"'/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_AUDIENCE
      run: |
        sed -i 's/<auth0_audience>/${{ secrets.DH_MASTELARI_AUTH0_APP_AUDIENCE }}/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_SUBDOMAIN
      run: |
        sed -i 's/<auth0_subdomain>/${{ secrets.DH_MASTELARI_AUTH0_SUBDOMAIN }}/' .env
      working-directory: ./frontend
    - name: Setup .env file - Set AUTH0 environment variables - AUTH0_REGION
      run: |
        sed -i 's/<auth0_region>/${{ secrets.DH_MASTELARI_AUTH0_REGION }}/' .env
      working-directory: ./frontend
    - name: Building
      run: yarn build
      working-directory: ./frontend
    - name: Packaging
      run: tar --exclude={".env.sample",".env.local","README.md","next-env.d.ts","jest.config.ts",".eslintrc.json","__tests__",".next","node_modules",".swc","coverage","out"} -zcvf ../build-content.tar.gz .
      working-directory: ./frontend
    - name: Publishing
      uses: ArthurYdalgo/github-action-scp@master
      with:
        host: ${{ secrets.DH_MASTELARI_SSHHOST }}
        username: ${{ secrets.DH_MASTELARI_SSHUSER }}
        password : ${{ secrets.DH_MASTELARI_SSHPASSWORD }}
        port: ${{ secrets.DH_MASTELARI_SSHPORT }}
        local: "build-content.tar.gz"
        remote: "wpdesafiob.mastelari.ml/build-content.tar.gz"
    - name: Post-publishing actions
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DH_MASTELARI_SSHHOST }}
        username: ${{ secrets.DH_MASTELARI_SSHUSER }}
        password : ${{ secrets.DH_MASTELARI_SSHPASSWORD }}
        port: ${{ secrets.DH_MASTELARI_SSHPORT }}
        script_stop: true
        script: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          cd ~/wpdesafiob.mastelari.ml
          tar -zxvf build-content.tar.gz
          rm build-content.tar.gz
          yarn install
          yarn build
          touch tmp/restart.txt
